

snippet tag "simple tags" b
<${1:div}>
  $2
</${1/(\w+).*/$1/}>
endsnippet                                   
                                             
snippet todo "This is todo " b               
<!-- TODO: ${1:desc} `!v strftime("%c")` -->
endsnippet                                   


snippet php "phptag"               
<?php
$1
?>
endsnippet                         
                                   
                                   
snippet phpp "phptag outside"      
?>
$1
<?php
endsnippet                         
                                    
                                    
#below snippet credit https://gist.github.com/ezynda3/9927166"      

snippet <?
    <?php

    ${0}
endsnippet

snippet ec
    echo ${0};
endsnippet

snippet <?e
    <?php echo ${0} ?>
endsnippet

# this one is for php5.4
snippet <?=
    <?=${0}?>
endsnippet

snippet ?=
    <?= ${0} ?>
endsnippet

snippet ?
    <?php ${0} ?>
endsnippet

snippet ?f
    <?php foreach ($${1:vars} as $${2:$var}): ?>
        ${0}
    <?php endforeach ?>
endsnippet

snippet ?i
    <?php if ($${1:var}): ?>
        ${0}
    <?php endif ?>
endsnippet

snippet ns
    namespace ${1:Foo\Bar\Baz};
    ${0}
endsnippet

snippet use
    use ${1:Foo\Bar\Baz};
    ${0}
endsnippet

snippet c
    class ${1:`vim_endsnippet

snippets#Filename()`}
    {
        ${0}
    }
endsnippet

snippet i
    interface ${1:`vim_endsnippet

snippets#Filename()`}
    {
        ${0}
    }
endsnippet

snippet t.
    $this->
endsnippet

snippet f
    function ${1:foo}(${2:array }${3:$bar})
    {
        ${0}
    }
endsnippet

# method
snippet met
    ${1:public} function ${2:foo}(${3})
    {
        ${0}
    }
endsnippet

# closure
snippet amet
    function(${1}) {
        ${0}
    }
endsnippet

# setter method
snippet sm
    /**
     * Sets the value of ${1:foo}
     *
     * @param ${2:$1} $$1 ${3:description}
     *
     * @return ${4:`vim_endsnippet

snippets#Filename()`}
     */
    ${5:public} function set${6:$2}(${7:$2 }$$1)
    {
        $this->${8:$1} = $$1;
        return $this;
    }
endsnippet

# getter method
snippet gm
    /**
     * Gets the value of ${1:foo}
     *
     * @return ${2:$1}
     */
    ${3:public} function get${4:$2}()
    {
        return $this->${5:$1};
    }
endsnippet

#setter
snippet $s
    ${1:$foo}->set${2:Bar}(${0});
endsnippet

#getter
snippet $g
    ${1:$foo}->get${0:Bar}();

endsnippet

# Tertiary conditional
snippet =?:
    $${1:foo} = ${2:true} ? ${3:a} : ${0};
endsnippet

snippet ?:
    ${1:true} ? ${2:a} : ${0}

endsnippet

snippet C
    $_COOKIE['${1:variable}']
endsnippet

snippet E
    $_ENV['${1:variable}']
endsnippet

snippet F
    $_FILES['${1:variable}']
endsnippet

snippet G
    $_GET['${1:variable}']
endsnippet

snippet P
    $_POST['${1:variable}']
endsnippet

snippet R
    $_REQUEST['${1:variable}']
endsnippet

snippet S
    $_SERVER['${1:variable}']
    $0
endsnippet

snippet SS
    $_SESSION['${1:variable}']
    $0
endsnippet

# the following are old ones
snippet inc
    include '${1:file}';
endsnippet

snippet inc1
    include_once '${1:file}';
endsnippet

snippet req
    require '${1:file}';
endsnippet

snippet req1
    require_once '${1:file}';
endsnippet

# Start Docblock
snippet /*
    /**
     * ${0}
     */
endsnippet

# Class - post doc
snippet doc_cp
    /**
     * ${1:undocumented class}
     *
     * @package ${2:default}
     * @subpackage ${3:default}
     * @author ${4:`g:snips_author`}
     */
endsnippet

# Class Variable - post doc
snippet doc_vp
    /**
     * ${1:undocumented class variable}
     *
     * @var ${2:string}
     */
endsnippet

# Class Variable
snippet doc_v
    /**
     * ${3:undocumented class variable}
     *
     * @var ${4:string}
     */
    ${1:var} $${2};
endsnippet

# Class
snippet doc_c
    /**
     * ${3:undocumented class}
     *
     * @package ${4:default}
     * @subpackage ${5:default}
     * @author ${6:`g:snips_author`}
     */
    ${1:}class ${2:}
    {
        ${0}
    } // END $1class $2
endsnippet

# Constant Definition - post doc
snippet doc_dp
    /**
     * ${1:undocumented constant}
     */
endsnippet

# Constant Definition
snippet doc_d
    /**
     * ${3:undocumented constant}
     */
    define(${1}, ${2});
endsnippet

# Function - post doc
snippet doc_fp
    /**
     * ${1:undocumented function}
     *
     * @return ${2:void}
     * @author ${3:`g:snips_author`}
     */
endsnippet

# Function signature
snippet doc_s
    /**
     * ${4:undocumented function}
     *
     * @return ${5:void}
     * @author ${6:`g:snips_author`}
     */
    ${1}function ${2}(${3});
endsnippet

# Function
snippet doc_f
    /**
     * ${4:undocumented function}
     *
     * @return ${5:void}
     * @author ${6:`g:snips_author`}
     */
    ${1}function ${2}(${3})
    {${0}
    }
endsnippet

# Header
snippet doc_h
    /**
     * ${1}
     *
     * @author ${2:`g:snips_author`}
     * @version ${3:$Id$}
     * @copyright ${4:$2}, `strftime('%d %B, %Y')`
     * @package ${0:default}
     */

endsnippet

# Interface
snippet interface
    /**
     * ${2:undocumented class}
     *
     * @package ${3:default}
     * @author ${4:`g:snips_author`}
     */
    interface ${1:`vim_endsnippet

snippets#Filename()`}
    {
        ${0}
    }
endsnippet

# class ...
snippet class
    /**
     * ${1}
     */
    class ${2:`vim_endsnippet

snippets#Filename()`}
    {
        ${3}
        /**
         * ${4}
         */
        ${5:public} function ${6:__construct}(${7:argument})
        {
            ${0}
        }
    }
endsnippet

snippet nc
    namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};

    ${2:abstract }class ${3:`vim_endsnippet

snippets#Filename()`}
    {
        ${0}
    }
endsnippet



#variables
snippet vd
    \$$1=$2;
endsnippet

snippet vds
    \$$1="$2";
endsnippet

snippet vda
    \$$1=array($2);
endsnippet


# define(...)
snippet def
    define('${1}'${2});
endsnippet

snippet def?
    ${1}defined('${2}')
endsnippet

snippet wh
    while (${1:/* condition */}) {
        ${0}
    }
endsnippet

# do ... while
snippet do
    do {
        ${0}
    } while (${1:/* condition */});
endsnippet

snippet if
    if (${1:/* condition */}) {
        ${0}
    }
endsnippet

snippet ifn
    if (!${1:/* condition */}) {
        ${2}
    }
endsnippet

snippet ifi
    <?php if (${1:/* condition */}): ?>
        ${0}
    <?php endif; ?>
endsnippet

snippet ifel
    if (${1:/* condition */}) {
        ${2}
    } else {
        ${3}
    }
    ${0}
endsnippet

snippet ifeli
    <?php if (${1:/* condition */}): ?>
        ${2:<!-- html... -->}
    <?php else: ?>
        ${3:<!-- html... -->}
    <?php endif; ?>
    ${0}
endsnippet

snippet el
    else {
        ${0}
    }
endsnippet

snippet elif
    elseif (${1:/* condition */}) {
        ${0}
    }
endsnippet

snippet switch
    switch ($${1:variable}) {
        case '${2:value}':
            ${3}
            break;
        ${0}
        default:
            ${4}
            break;
    }
endsnippet

snippet case
    case '${1:value}':
        ${2}
        break;
endsnippet

snippet for
    for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
        ${0}
    }
endsnippet

snippet foreach
    foreach ($${1:variable} as $${2:value}) {
        ${0}
    }
endsnippet

snippet foreachi
    <?php foreach ($${1:variable} as $${2:value}): ?>
        ${0:<!-- html... -->}
    <?php endforeach; ?>
endsnippet

snippet foreachk
    foreach ($${1:variable} as $${2:key} => $${3:value}) {
        ${0}
    }
endsnippet

snippet foreachki
    <?php foreach ($${1:variable} as $${2:key} => $${3:value}): ?>
        ${0:<!-- html... -->}
    <?php endforeach; ?>
endsnippet

# $... = array (...)
snippet array
    $${1:arrayName} = array('${2}' => ${3});
endsnippet

snippet try
    try {
        ${0}
    } catch (${1:Exception} $e) {
    }
# lambda with closure
endsnippet

snippet lambda
    ${1:static }function (${2:args}) use (${3:&$x, $y /*put vars in scope (closure) */}) {
        ${0}
    };
endsnippet

# pre_dump();
snippet pd
    echo '<pre>'; var_dump(${0}); echo '</pre>';
# pre_dump(); die();
endsnippet

snippet pdd
    echo '<pre>'; var_dump(${1}); echo '</pre>'; die(${0:});
endsnippet

snippet vd
    var_dump($${0});
endsnippet

snippet vdd
    var_dump(${1}); die(${0:});
endsnippet

snippet vdf
    error_log(print_r($${1:foo}, true), 3, '${2:/tmp/debug.log}');
endsnippet

snippet http_redirect
    header ("HTTP/1.1 301 Moved Permanently");
    header ("Location: ".URL);
    exit();
endsnippet

# Getters & Setters
snippet gs
    /**
     * Gets the value of ${1:foo}
     *
     * @return ${2:$1}
     */
    public function get${3:$2}()
    {
        return $this->${4:$1};
    }

    /**
     * Sets the value of $1
     *
     * @param $2 $$1 ${5:description}
     *
     * @return ${6:`vim_endsnippet

snippets#Filename()`}
     */
    public function set$3(${7:$2 }$$1)
    {
        $this->$4 = $$1;
        return $this;
    }
endsnippet

# anotation, get, and set, useful for doctrine
snippet ags
    /**
     * ${1:description}
     *
     * @${0}
     */
    ${2:protected} $${3:foo};

    public function get${4:$3}()
    {
        return $this->$3;
    }

    public function set$4(${5:$4 }$${6:$3})
    {
        $this->$3 = $$6;
        return $this;
    }
endsnippet

snippet rett
    return true;
endsnippet

snippet retf
    return false;
endsnippet

snippet am
    $${1:foo} = array_map(function($${2:v}) {
        ${0}
        return $$2;
    }, $$1);
endsnippet

snippet aw
    array_walk($${1:foo}, function(&$${2:v}, $${3:k}) {
        $$2 = ${0};
    });

endsnippet

# static var assign once
snippet static_var
    static $${1} = null;
    if (is_null($$1)){
        $$1 = ${2};
    }

endsnippet

snippet CSVWriter
    <?php
    
    class CSVWriter {
        public function __construct($file_or_handle, $sep = "\t", $quot = '"'){
            $args = func_get_args();
            $mode = isset($opts['mode']) ? $opts['mode'] : 'w';
    
            $this->f =
                is_string($file_or_handle)
                ? fopen($file_or_handle, $mode)
                : $file_or_handle;
    
            $this->fputcsv_args = array($this->f, null, $sep, $quot);
    
            if (!$this->f) throw new Exception('bad file descriptor');
        }
    
        public function write($row){
            $this->fputcsv_args[1] =& $row;
            call_user_func_array('fputcsv', $this->fputcsv_args);
        }
    
        public function close(){
            if (!is_null($this->f))
                fclose($this->f);
            $this->f = null;
        }
    
        public function __destruct(){
            $this->close();
        }
    
    }

endsnippet
snippet is
    isset($1{VISUAL})

endsnippet

# phpunit   
snippet ase
    $this->assertEquals(${1:expected}, ${2:actual});

endsnippet

snippet asne
    $this->assertNotEquals(${1:expected}, ${2:actual});

endsnippet

snippet asf
    $this->assertFalse(${1:Something});

endsnippet

snippet ast
    $this->assertTrue(${1:Something});

endsnippet

snippet asfex
    $this->assertFileExists(${1:path/to/file});

endsnippet

snippet asfnex
    $this->assertFileNotExists(${1:path/to/file});

endsnippet

snippet ascon
    $this->assertContains(${1:Search Value}, ${2:Array or Iterator});

endsnippet

snippet ashk
    $this->assertArrayHasKey(${1:key}, ${2:array});

endsnippet

snippet asnhk
    this->assertArrayNotHasKey(${1:value}, ${2:array});

endsnippet

snippet ascha
    $this->assertClassHasAttribute('${1:Attribute Name}', '${2:ClassName}');

endsnippet

snippet asi
    $this->assertInstanceOf(${1:expected}, ${2:actual});

endsnippet

snippet tc
    public function test${1:name_of_the_test}()
    {
        ${0:code}
    }
endsnippet
